import streamlit as st
import requests
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# --- OpenAI API Konfiguration ---
api_key = os.getenv('OPENAI_API_KEY')
if not api_key:
    st.error("Please set the OPENAI_API_KEY environment variable in your .env file")
    st.stop()

api_url = "https://api.openai.com/v1/chat/completions"

headers = {
    "Authorization": f"Bearer {api_key}",
    "Content-Type": "application/json"
}

# --- System Prompt ---
base_prompt = """
Du bist ein inspirierender KI-Coach f√ºr Berufsorientierung.
Deine Aufgabe ist es, basierend auf den Interessen und St√§rken des Nutzers passende Berufsinspirationen zu geben.
Stelle keine Diagnosen und gib keine vorschnellen Ratschl√§ge. 
Fokussiere dich darauf, neue Perspektiven zu er√∂ffnen und Denkanst√∂√üe zu geben.
"""

# Custom CSS f√ºr bordeaux rotes Branding
st.markdown("""
    <style>
    .stApp header {
        background-color: #800020;
    }
    </style>
    """, unsafe_allow_html=True)

st.title("üéØ Mein Mutiger Weg Berufsinspirationen")

# Willkommens-Text
st.markdown("""
Willkommen! üíô Hier bekommst du neue Perspektiven f√ºr deine Berufswahl.
Wichtig: Bitte schreibe hier keine personenbezogenen Daten hin.
""")

# --- Hauptfragen ---
st.subheader("Deine Berufsw√ºnsche und St√§rken")

traumjob = st.text_area(
    "Was sind deine wichtigsten Kriterien f√ºr deinen Traumjob?",
    help="‚ö†Ô∏è Bitte gib hier keine personenbezogenen Daten ein (z. B. deinen Namen, deine Adresse oder deine Schule)"
)

interessen = st.text_area(
    "Was sind deine Top 3 Interessen?",
    help="‚ö†Ô∏è Bitte gib hier keine personenbezogenen Daten ein (z. B. deinen Namen, deine Adresse oder deine Schule)"
)

staerken = st.text_area(
    "Was sind deine Top 3 St√§rken?",
    help="‚ö†Ô∏è Bitte gib hier keine personenbezogenen Daten ein (z. B. deinen Namen, deine Adresse oder deine Schule)"
)

# --- Berufsinspirationen generieren ---
if st.button("üéØ Berufsinspirationen erhalten"):
    if not (traumjob and interessen and staerken):
        st.warning("Bitte f√ºlle alle Felder aus.")
    else:
        # Erstelle den Prompt f√ºr die Berufsinspirationen
        inspiration_prompt = f"""
        Basierend auf folgenden Informationen, gib 5 konkrete Berufsinspirationen:
        
        Traumjob-Kriterien: {traumjob}
        Top 3 Interessen: {interessen}
        Top 3 St√§rken: {staerken}
        
        F√ºr jeden Beruf:
        1. Nenne den Berufstitel
        2. Erkl√§re kurz, warum dieser Beruf passen k√∂nnte
        3. Gib 2-3 Kernaufgaben des Berufs
        
        Formatiere die Antwort √ºbersichtlich mit Emojis und Abs√§tzen.
        """
        
        with st.spinner("üí≠ Generiere deine Berufsinspirationen..."):
            try:
                response = requests.post(api_url, headers=headers, json={
                    "model": "gpt-4",
                    "messages": [
                        {"role": "system", "content": base_prompt},
                        {"role": "user", "content": inspiration_prompt}
                    ],
                    "temperature": 0.7,
                    "max_tokens": 1000
                })
                
                # √úberpr√ºfe den Response-Status
                response.raise_for_status()
                
                # Versuche die Antwort zu parsen
                response_data = response.json()
                if "choices" in response_data and len(response_data["choices"]) > 0:
                    inspirations = response_data["choices"][0]["message"]["content"]
                    # Initialisiere Chat
                    st.session_state.messages = [
                        {"role": "system", "content": base_prompt},
                        {"role": "assistant", "content": inspirations}
                    ]
                    st.session_state.chat_started = True
                else:
                    st.error("Unerwartetes Antwortformat von der API. Bitte versuche es sp√§ter erneut.")
                    
            except requests.exceptions.RequestException as e:
                st.error(f"Fehler bei der API-Anfrage: {str(e)}")
            except (KeyError, ValueError) as e:
                st.error(f"Fehler beim Verarbeiten der API-Antwort: {str(e)}")

# --- Chat-Interface ---
if st.session_state.get("chat_started", False):
    st.divider()
    st.header("üí¨ Dein Feedback")

    # Chatverlauf anzeigen
    for msg in st.session_state.messages[1:]:  # System-Prompt √ºberspringen
        st.chat_message("user" if msg["role"] == "user" else "assistant").write(msg["content"])

    # Nachrichteneingabe
    user_input = st.chat_input("Was denkst du zu deinen Berufsinspirationen?")
    if user_input:
        # Sofortige Anzeige der Nutzernachricht
        st.session_state.messages.append({"role": "user", "content": user_input})
        st.chat_message("user").write(user_input)

        with st.spinner("üí≠ Denke nach..."):
            try:
                response = requests.post(api_url, headers=headers, json={
                    "model": "gpt-4",
                    "messages": st.session_state.messages,
                    "temperature": 0.7,
                    "max_tokens": 1000
                })
                
                # √úberpr√ºfe den Response-Status
                response.raise_for_status()
                
                # Versuche die Antwort zu parsen
                response_data = response.json()
                if "choices" in response_data and len(response_data["choices"]) > 0:
                    reply = response_data["choices"][0]["message"]["content"]
                    st.session_state.messages.append({"role": "assistant", "content": reply})
                    st.chat_message("assistant").write(reply)
                else:
                    st.error("Unerwartetes Antwortformat von der API. Bitte versuche es sp√§ter erneut.")
                    
            except requests.exceptions.RequestException as e:
                st.error(f"Fehler bei der API-Anfrage: {str(e)}")
            except (KeyError, ValueError) as e:
                st.error(f"Fehler beim Verarbeiten der API-Antwort: {str(e)}") 